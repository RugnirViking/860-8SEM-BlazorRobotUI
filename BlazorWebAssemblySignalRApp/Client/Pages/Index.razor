@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
    <div class="flexrow">
        <div class="messageContent">
            <div class="sendMessagesSection">
                <div class="form-group">
                    <label>
                        User:
                        <input @bind="userInput" />
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        Message:
                        <input @bind="messageInput" size="50" />
                    </label>
                </div>
                <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

                <hr>
            </div>
            <div id="messagesList" xyz="fade down-100% back-5">
                <!-- For each of the last 5 messages (older ones are hidden) -->
                @foreach (var message in messages.Skip(Math.Max(0, messages.Count() - 5)))
                {
                    <div class="msg-wrapper xyz-in msg-wrapper-@message.msgType">
                        <div class="msg-icon msg-icon-@message.msgType"></div><div class="message-in msg-type-@message.msgType" @key=message.key>@message.message</div>
                    </div>
                }
            </div>
        </div>
        <div class="pictureBar">
            <div>
                @{
                    <img src="data:image/png;base64,@cutImage" alt="Target Object" class="previewImg" />
                }
                @{
                    <img src="data:image/png;base64,@overviewImage" alt="Overview Image" class="previewImg" />
                }
            </div>
            Status: Moving manipulator into position
        </div>
    </div>
    @code {
        private HubConnection hubConnection;
        private List<keyMessage> messages = new List<keyMessage>();
        private string userInput;
        private string messageInput;
        private string cutImage;
        private string overviewImage;

        protected override async Task OnInitializedAsync()
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/signalrhub"))
                .Build();

            hubConnection.On<string, string, string>("ReceiveMessage", (user, msgType, message) =>
            {
                var encodedMsg = $"{user}: {message}";
                keyMessage msg = new keyMessage();
                msg.message = message;
                msg.key = 0;
                msg.msgType = msgType;
                if (messages.Count > 0)
                {
                    msg.key = messages.Last().key + 1;
                }
                messages.Add(msg);
                StateHasChanged();
            });
            hubConnection.On<string, string, string>("RecieveImage", (user, msgType, image) =>
            {
                keyImage msg = new keyImage();

                if (user == "1"){
                    cutImage = image;
                } else
                {
                    overviewImage = image;
                }
                StateHasChanged();
            });
            await hubConnection.StartAsync();
        }

        Task Send() =>
            hubConnection.SendAsync("SendMessage", userInput, messageInput);

        public bool IsConnected =>
            hubConnection.State == HubConnectionState.Connected;

        public async ValueTask DisposeAsync()
        {
            await hubConnection.DisposeAsync();
        }
    }